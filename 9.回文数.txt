判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。

示例 1:

输入: 121
输出: true
示例 2:

输入: -121
输出: false
解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
示例 3:

输入: 10
输出: false
解释: 从右向左读, 为 01 。因此它不是一个回文数。

方法一：
代码：PHP
/**
     * @param Integer $x
     * @return Boolean
     */
    function isPalindrome($x) {
        	$x = strval($x);
    	$start = 0;
    	$end = strlen($x)-1;
    	while(isset($x[$start]) && isset($x[$end]))
    	{
    		var_dump($x[$start]);
    		var_dump($x[$end]);
    		echo '<br>';
    		if($x[$start] != $x[$end]){
    			return false;
    		}
    		$start++;
    		$end--;
    	}
        return true;
    }
方法二：整数取余，对半比较
代码：PHP
/**
     * @param Integer $x
     * @return Boolean
     */
    function isPalindrome($x) {
       if($x<0 || ($x>0 && $x%10 == 0)){
           return false;
       }
        
        $reverseNum = 0;
        while($x>$reverseNum){
            $reverseNum = $reverseNum*10 + $x%10;
            $x = intval($x/10);
        }
        return $x == $reverseNum || $x == intval($reverseNum/10);
    }
代码：c
bool isPalindrome(int x) {
        if(x < 0 || x!=0 && x%10==0) 
            return false;
        
        int rev =0;
        while (x > rev) {
            rev = rev*10 + x%10;
            x /=10;
        }
        return x==rev || x==rev/10;
    }
方法三：
代码：PHP
/**
     * @param Integer $x
     * @return Boolean
     */
    function isPalindrome($x) {
       $x = strval($x);
       return $x == strrev($x);
    }