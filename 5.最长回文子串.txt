给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"
输出: "bb"

方法一:中心扩展法
代码：PHP
class Solution {
    //添加分隔符
    function addDelimiter($s,$d) {
        $len = strlen($s);
        $new = $d;
        for($i=0;$i<$len;$i++){
            $new .= $s[$i];
            $new .= $d;
        }
        return $new;
    }
    /**
     * @param String $s
     * @return String
     */
    function longestPalindrome($s) {
        
        $len = strlen($s);
        if($len < 2)
            return $s;
        
        //预处理添加分隔符
        $str = $this->addDelimiter($s,'#');
        $len = 2*$len + 1;
        $start = 0;
        $maxLen = 0;
        for($i=0;$i<$len;$i++){
            $long = $this->maxLong($str,$i,$len);
            if($long > $maxLen){
                $maxLen = $long;
                $start = ($i - $maxLen)/2;
            }
        }
        return substr($s,$start,$maxLen);
    }

    //以i为中心的最长回文长度
    function maxLong($s,$center,$len){
        $i = $center - 1;
        $j = $center + 1;
        $long = 0;
        while($i >= 0 && $j < $len && $s[$i] == $s[$j]){
            $i--;
            $j++;
            $long++;
        }
        return $long;
    }
}

方法二：马拉车算法
代码：PHP
class Solution {
    //添加分隔符
    function addDelimiter($s,$d) {
        $len = strlen($s);
        $new = $d;
        for($i=0;$i<$len;$i++){
            $new .= $s[$i];
            $new .= $d;
        }
        return $new;
    }
    /**
     * @param String $s
     * @return String
     */
    function longestPalindrome($s) {
        
        $len = strlen($s);
        if($len < 2)
            return $s;
        
        //预处理添加分隔符
        $str = $this->addDelimiter($s,'#');
        $len = 2*$len + 1;

        $p = [];    //记录每个字符扩展的最大长度

        $start = 0; //最长回文子串对应的开头
        $maxLen = 0;//最长回文子串的长度

        //扩展的最远边界
        $maxRight = 0;
        //最远边界对应的中心
        $center = 0;

        for($i=0;$i<$len;$i++){

            if($i < $maxRight){
                //$i关于center的镜像
                $mirror = $center*2 - $i;
                $p[$i] = min($maxRight - $i,$p[$mirror]);
            }else{
                $p[$i] = 0;
            }

            $left = $i - ($p[$i] + 1);
            $right = $i + ($p[$i] + 1);

            //继续扩展
            while($left >= 0 && $right < $len && $str[$left] == $str[$right]){
                $left--;
                $right++;
                $p[$i]++;
            }

            //判断是否超过最大边界
            if($i + $p[$i] > $maxRight){
                $maxRight = $i + $p[$i];
                $center = $i;
            }

            //判断是否超过最长回文长度
            if($p[$i] > $maxLen){
                $maxLen = $p[$i];
                $start = ($i - $maxLen)/2;
            }
        }
        return substr($s,$start,$maxLen);
    }

    //以i为中心的最长回文长度
    function maxLong($s,$center,$len){
        $i = $center - 1;
        $j = $center + 1;
        $long = 0;
        while($i >= 0 && $j < $len && $s[$i] == $s[$j]){
            $i--;
            $j++;
            $long++;
        }
        return $long;
    }
}

方法三：动态规划，效率较低
代码：PHP
class Solution {

    /**
     * @param String $s
     * @return String
     */
    function longestPalindrome($s) {
        $len = strlen($s);
        if($len < 2)
            return $s;
        $dp = [];
        $right = 0;
        $left = 0;
        
        for($i=0;$i<$len;$i++){
            $dp[$i][$i] = true;

            for($j=$i-1;$j>=0;$j--){

                $dp[$i][$j] = $s[$i] == $s[$j] && ($i-$j==1 || $dp[$i-1][$j+1]);

	            if($dp[$i][$j] && ($i-$j)>=($right-$left)){
	                $right = $i;
	                $left = $j;
	            }
            }
        }
        
        return substr($s,$left,$right-$left+1);
    }
}