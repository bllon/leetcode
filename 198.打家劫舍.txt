你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

示例 1:

输入: [1,2,3,1]
输出: 4
解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2:

输入: [2,7,9,3,1]
输出: 12
解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。

方法:
从第1家开始遍历，
要么选，要么不选。
打到下标为1时，要比较nums[0]和nums[1]的大小
打到下标为2时，要比较nums[1]+nus[0]和nums[1]的大小
打到下标为3时，要比较（打到下标为1时的结果+nums[3]）和（打到下标为2时的结果）的大小
那么递推式：f[j] = max(f[j-2]+nums[j],f[j-1])		f[j]表示打到下标为j时获得的总金额

代码一（暴力递归，超时，不通过，因为存在重复计算）：c++
class Solution {
public:
    int search(int idx,vector<int>& nums){
        if(idx >= nums.size()){
            return 0;
        }
        
        return max(search(idx+2,nums)+nums[idx],search(idx+1,nums));
    }
    
    int rob(vector<int>& nums) {
        return search(0,nums);
    }
};

代码二（添加备忘录，通过）：c++
class Solution {
public:
    int f[1000];
    int search(int idx,vector<int>& nums){
        if(idx >= nums.size()){
            return 0;
        }
        if(f[idx] != -1){
            return f[idx];
        }
        
        f[idx] = max(search(idx+2,nums)+nums[idx],search(idx+1,nums));
        return f[idx];
    }
    
    int rob(vector<int>& nums) {
        for(int i=0;i<1000;i++){
            f[i] = -1;
        }
        return search(0,nums);
    }
};

代码三（自底向上，递推）：c++
class Solution {
public:
    
    
    
    int rob(vector<int>& nums) {
        
        if(nums.size() == 0){
            return 0;    
        }
        
        if(nums.size() == 1){
            return nums[0];
        }
        
        int f[nums.size()];
        
        f[0] = nums[0];
        f[1] = max(nums[0],nums[1]);
        
        for(int j=2;j<nums.size();j++){
            f[j] = max(f[j-2]+nums[j],f[j-1]);
        }
        return f[nums.size()-1];
    }
};

代码四（优化空间）：c++
class Solution {
public:
    
    int rob(vector<int>& nums) {
        
        if(nums.size() == 0){
            return 0;    
        }
        
        if(nums.size() == 1){
            return nums[0];
        }
        
        int prev,curr,temp;
        prev = nums[0];
        curr = max(nums[0],nums[1]);
               
        for(int j=2;j<nums.size();j++){
            temp = max(prev+nums[j],curr);
            prev = curr;
            curr = temp;            
        }
        return curr;
    }
};