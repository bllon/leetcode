给定一个包含红色、白色和蓝色，一共?n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。

此题中，我们使用整数 0、?1 和 2 分别表示红色、白色和蓝色。

注意:
不能使用代码库中的排序函数来解决这道题。

示例:

输入: [2,0,2,1,1,0]
输出: [0,0,1,1,2,2]
进阶：

一个直观的解决方案是使用计数排序的两趟扫描算法。
首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。
你能想出一个仅使用常数空间的一趟扫描算法吗？

方法一：
利用三指针，p0,p2,curr
遍历数组nums，当curr<=p2
当nums[i] = 1时，i++
当nums[i] = 2时，nums[i]与nums[p2]交换,p2--
当nums[i] = 0时，nums[i]与p0进行交换,p0++,i++

代码c++：
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int p0 = 0;
        int p2 = nums.size()-1;
        for(int i=0;i<=p2;)
        {
            if(nums[i]==1)
            {
                i++;
            }else if(nums[i]==2)
            {                
                swap(nums[i],nums[p2]);
                p2--;
            }else{
                swap(nums[p0],nums[i]);
                p0++;
                i++;
            }
        }
    }
};

方法二：
遍历nums，用三个变量记录0,1,2的个数
遍历nums，分别填入
代码c++：
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n0,n1,n2;
        n0=n1=n2=0;
        
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==0){
                n0++;
            }else if(nums[i]==1){
                n1++;
            }else{
                n2++;
            }
        }
        
        for(int i=0;i<n0;i++)
        {
            nums[i] = 0;
        }
        
        for(int i=n0;i<n1+n0;i++)
        {
            nums[i] = 1;
        }
        
        for(int i=(n0+n1);i<nums.size();i++)
        {
            nums[i] = 2;
        }
    }
};