给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。

示例:

输入: [0,1,0,3,12]
输出: [1,3,12,0,0]
说明:

必须在原数组上操作，不能拷贝额外的数组。
尽量减少操作次数。

解法一:
新开一个同等大小的数组
遍历nums，将不为0的元素添加进去，用一个变量j记录添加的个数
接着从j开始遍历，将之后的元素赋值为0

代码c++:
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int notZeroes[nums.size()];
        int i,j;
        i=j=0;
        while(i<nums.size())
        {
            if(nums[i] != 0)
            {
                notZeroes[j] = nums[i];
                j++;
            }
            i++;
        }
        
        for(i=0;i<nums.size();i++){
            if(i < j){
                nums[i] = notZeroes[i];
            }else{
                nums[i] = 0;
            }
        }        
    }
};

代码二同样：
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        
        int nonZeroElements[nums.size()];
        int j=0;
        for(int i=0;i<nums.size();i++)
            if(nums[i]){
                nonZeroElements[j] = nums[i];
                j++;
            }
                
        
        for(int i=0;i<j;i++)
            nums[i] = nonZeroElements[i];
        
        for(int i=j;i<nums.size();i++)
            nums[i] = 0;
    }
};

方法二：
设置一个变量k=0；
遍历nums数组，将不为0的元素移动到k的位置，也就是往前移动
剩余的k到nums.size()就补0

代码c++：
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        
        int k = 0;
        
        for(int i=0;i<nums.size();i++)
            if(nums[i]){
                nums[k++] = nums[i];
            }
                
        
        for(int i=k;i<nums.size();i++)
            nums[i] = 0;
        
    }
};

方法三：
设置变量k=0
遍历数组nums，将非零元素与之前的零元素进行交换

代码c++：
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        
        int k = 0;
        
        
        for(int i=0;i<nums.size();i++)
            if(nums[i]){
                //不为0
                if(k != i){
                    //与零元素进行交换
                    swap(nums[k++],nums[i]);
                }else{
                    k++;
                }
                
            }
        
    }
};
