给出两个?非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照?逆序?的方式存储的，并且它们的每个节点只能存储?一位?数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0?开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

代码一PHP：
/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = $val; }
 * }
 */
class Solution {

    /**
     * @param ListNode $l1
     * @param ListNode $l2
     * @return ListNode
     */
    function addTwoNumbers($l1, $l2) {
        
        //生成结果list节点
        $node = null;
		
	//临时保存l1和l2的当前节点
        $temp1=$l1;
        $temp2=$l2;
		
	//进位
        $w=0;
        
        while($temp1!=null||$temp2!=null)
        {
        	
	//生成当前结果节点
            $next = new ListNode(0);
                        
	//计算当前位的和
            $sum = $temp1->val+$temp2->val+$w;
			
	//判断是否进位
            if($sum>=10){
                //需要进位
                
                $next->val=$sum%10;
                $w = intval($sum/10);
            }else{
                $next->val=$sum;
                $w = 0;
            }
            
	//把头结点赋给$p
	$p= &$node;
			
	//判断头结点是否为null
            if($p==null){
            	//把生成节点赋给头结点
                $node=$next;
            }else{
            	
	while($p!=null)
	{
	$p=&$p->next;
	}
                $p=$next;
            }
			
//          $node = $p;
            
            $temp1=$temp1->next;
            $temp2=$temp2->next;
            
        }
        if($w!=0){
	$p->next = new ListNode($w);
}
        
        return $node;
        
    }

代码二PHP：
/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = $val; }
 * }
 */
class Solution {

    /**
     * @param ListNode $l1
     * @param ListNode $l2
     * @return ListNode
     */
    function addTwoNumbers($l1, $l2) {
        
        //生成结果list节点
        $node = null;
		
		//临时保存l1和l2的当前节点
        $temp1=&$l1;
        $temp2=&$l2;
		
		//进位
        $w=0;
        
        while($temp1!=null||$temp2!=null)
        {
        	
	//生成当前结果节点
            $next = new ListNode(0);
                        
	//计算当前位的和
            $sum = $temp1->val+$temp2->val+$w;
			
	//判断是否进位
            if($sum>=10){
                //需要进位
                
                $next->val=$sum%10;
                $w = intval($sum/10);
            }else{
                $next->val=$sum;
                $w = 0;
            }
            
	//把头结点赋给$p
	$p= &$node;
			
	//判断头结点是否为null
            if($p==null){
            	//把生成节点赋给头结点
                $node=$next;
            }else{
            	
	while($p!=null)
	{
	$p=&$p->next;
	}
                $p=$next;
            }
			
//          $node = $p;
            
            $temp1=$temp1->next;
            $temp2=$temp2->next;
            
        }
        if($w!=0){
	$p->next = new ListNode($w);
}
        
        return $node;
        
    }
}

代码三PHP：
/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val) { $this->val = $val; }
 * }
 */
class Solution {

    /**
     * @param ListNode $l1
     * @param ListNode $l2
     * @return ListNode
     */
    function addTwoNumbers($l1, $l2) {
        
        //生成结果list节点
        $node = null;
		
	//进位
        $w=0;
        
        while($l1!=null||$l2!=null)
        {
	//生成当前结果节点
            $next = new ListNode(0);
                        
	//计算当前位的和
	$x = $l1!=null ? $l1->val:0;
	$y = $l2!=null ? $l2->val:0;
			
            $sum = $x+$y+$w;
			
	//判断是否进位
            $next->val=$sum%10;
            $w = $sum-10>=0?1:0;
            
	//把头结点赋给$p
	$p= &$node;
			
	//判断头结点是否为null
            if($p==null){
            	//把生成节点赋给头结点
                $node=$next;
            }else{
            	
	while($p!=null)
	{
	$p=&$p->next;
	}
                $p=$next;
            }
            
	if($l1!=null)
		$l1=$l1->next;
	if($l2!=null)
            		$l2=$l2->next;
            
        }
		
	if($w > 0){
	$p->next = new ListNode($w);
	}
        
        return $node;
        
    }
}