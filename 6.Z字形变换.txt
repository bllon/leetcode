问题描述：
将一个给定字符串根据给定的行数，以从上往下、从左到右进行?Z 字形排列。

比如输入字符串为 "LEETCODEISHIRING"?行数为 3 时，排列如下：

L   C   I   R
E T O E S I I G
E   D   H   N
之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如："LCIRETOESIIGEDHN"。

请你实现这个将字符串进行指定行数变换的函数：

string convert(string s, int numRows);
示例?1:

输入: s = "LEETCODEISHIRING", numRows = 3
输出: "LCIRETOESIIGEDHN"
示例?2:

输入: s = "LEETCODEISHIRING", numRows =?4
输出:?"LDREOEIIECIHNTSG"
解释:

L     D     R
E   O E   I I
E C   I H   N
T     S     G

方法一：有n行就建立n个数组，遍历字符串，控制行循环，把相应的字符丢到对应的数组，然后遍历所有数组，拼接字符串
代码：PHP
/**
     * @param String $s
     * @param Integer $numRows
     * @return String
     */
    function convert($s, $numRows) {
        
        if($numRows == 1){
            return $s;
        }
        
        //创建一个二维数组
        $len = strlen($s);
        $data = [];
        for($i=0;$i<$numRows;$i++)
        {
            $data[$i] = [];
        }
        $n = 0;
        $sta = 1;
        for($i=0;$i<$len;$i++){
            $data[$n][] = $s[$i];
            if($sta){
                $n++;
                if($n == $numRows-1){
                    $sta = 0;
                }
            }else{
                $n--;
                if($n == 0){
                    $sta = 1;
                }
            }
            
            
        }
        $str = '';
        for($i=0;$i<$numRows;$i++){
            $str .= implode('',$data[$i]);
        }
        return $str;
    }

代码：c++
string convert(string s, int numRows) {
        if (numRows == 1) return s;

        vector<string> rows(min(numRows, int(s.size())));   //创建数组
        int curRow = 0;//当前行
        bool goingDown = false;//是否改变行方向

        for (char c : s) {  //遍历s字符串中的字符
            rows[curRow] += c;
            if (curRow == 0 || curRow == numRows - 1) goingDown = !goingDown;//如果当前行为第一行或者最后一行，就改变方向
            curRow += goingDown ? 1 : -1;//ture就增，false就减
        }

        string ret;
        for (string row : rows) ret += row;//遍历数组，拼接字符串
        return ret;
    }


方法二：
找规律，发现：
首先找第0行，再接着后面找
行0中的所有字符位置：2*numRows - 2
行numRows-1中的字符位置：(2*numRows-2)+numRows-1
内部行i的字符位置(2*numRows-2)+i以及(k+1)(2*numRows-2)-i

代码：c++
string convert(string s, int numRows) {
        if (numRows == 1) return s;

        string ret;
        int n = s.size();
        int cycleLen = 2 * numRows - 2;

        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j + i < n; j += cycleLen) {
                ret += s[j + i];
                if (i != 0 && i != numRows - 1 && j + cycleLen - i < n)
                    ret += s[j + cycleLen - i];
            }
        }
        return ret;
    }

代码：javascript
/**
 * @param {string} s
 * @param {number} numRows
 * @return {string}
 */
var convert = function(s, numRows) {
    if(s.length == 1){
        return s;
    }
    
    var syc = 2*numRows - 2;
    var ret = '';
    for(var i=0;i<numRows;i++){
        for(var j=0;j+i<s.length;j+=syc){
            ret += s[j+i];
            if(i!=0 && i!=numRows-1 && j+syc-i<s.length){
                ret += s[j+syc-i];
            }
        }
    }
    return ret;
};