给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。

示例 1:

输入: "(()"
输出: 2
解释: 最长有效括号子串为 "()"
示例 2:

输入: ")()())"
输出: 4
解释: 最长有效括号子串为 "()()"

方法一：暴力法，求出每个字符开头的最长有效子串，不过时间超时，最右一个用例没有通过，应该还有简化的地方
代码：PHP
class Solution {

    /**
     * @param String $s
     * @return Integer
     */
    function longestValidParentheses($s) {

        $len = strlen($s);
        $max = 0;

        for($i=0;$i<$len;$i++){
            $j = $i;
            $num = 0;

            while($j < $len){
                if($s[$j] == '('){
                    $num++;
                    if($num > ($len-$i)/2){
                        break;
                    }
                }else{
                    if($num == 0){
                        break;
                    }else{
                        $num--;
                        if($num == 0){
                            if($j-$i > $max){
                                $max = $j-$i+1;
                            }
                        }
                    }
                }
                $j++;
            }
        }

        return $max;
    }
}

方法二：栈，效率最高的算法
代码：PHP
class Solution {

    /**
     * @param String $s
     * @return Integer
     */
    function longestValidParentheses($s) {
        $stack = [];
        array_push($stack,-1);
        $len = strlen($s);
        $max = 0;

        for($i=0;$i<$len;$i++){
            if($s[$i] == '('){
                array_push($stack,$i);
            }else{
                array_pop($stack);

                if(empty($stack)){
                    array_push($stack,$i);
                }else{
                    $j = array_pop($stack);
                    $max = max($max,$i-$j);
                    array_push($stack,$j);
                }
            }
        }

        return $max;
    }
}

方法三：在方法二的基础上进一步的空间优化
实际上，这道题仍然可以像上面那样，用变量来代替栈来优化，不过这个时候我们需要两个变量，我们假设变量为 left 和 right。

我们在从从左到右遍历字符串的过程中，用 left 记录 ‘(‘ 的数量，用 right 记录 ‘)’ 的数量。并且在遍历的过程中：

1、如果 left >= right，显然这个时候 right 个 ‘)’ 都将一定能够得到匹配。所以当前的有效括号长度为 2 * right。然后更新 max。

2、如果 left < right，显然这个时候部分 ‘)’ 一定得不到匹配，此时我们把 left 和 right 都置为 0。

当遍历完字符串，我们是否就得到最大长度的有效括号了呢？大家可以想一下

答是不可以的，我们还需要从右到左遍历计算一下。

为什么呢？

因为实际上 ‘(‘ 和 ‘)’ 其实是等价的，为什么就不可以倒过来遍历计算呢？所以，千万别忽略了哈。

代码中关键在：
if($left == $right){
    $max = max($max,$right*2);
}else if($right > $left){
    $left=$right=0;
}

代码PHP：
class Solution {

    /**
     * @param String $s
     * @return Integer
     */
    function longestValidParentheses($s) {
        $len = strlen($s);
        $left = $right = 0;
        $max = 0;
        
        //从左到右
        for($i=0;$i<$len;$i++){
            if($s[$i] == '('){
                $left++;
            }else{
                $right++;
            }

            if($left == $right){
                $max = max($max,$right*2);
            }else if($right > $left){
                $left=$right=0;
            }
        }

        $left=$right=0;
        //从右到左
        for($i=$len-1;$i>=0;$i--){
            if($s[$i] == '('){
                $left++;
            }else{
                $right++;
            }

            if($left == $right){
                $max = max($max,$left*2);
            }else if($left > $right){
                $left=$right=0;
            }
        }

        return $max;
    }
}


方法四：动态规划
这个问题可以通过动态规划解决。我们定义一个dp数组，其中第i个元素表示以下标为i的字符结尾的最长有效子字符串的长度。我们将dp数组全部初始化为0。现在很明显有效的子字符串一定以‘)’结尾。这进一步可以得出结论：以‘(’结尾的子字符串对应的dp数组位置上的值必定为0。所以说我们只需要更新‘)’在dp数组中对应位置的值。

为了求出dp数组，我们每两个字符检查一次，如果满足如下条件

$s[$i] = ‘)’ 且$s[$i - 1] = ‘(’ ，也就是字符串形如"……()"‘‘……()"，我们可以推出：

	$dp[$i]= $dp[$i-2]+2

我们可以进行这样的转移，是因为结束部分的 "()" 是一个有效子字符串，并且将之前有效子字符串的长度增加了 2 。

$s[$i] =‘)’ 且 $s[$i - 1] = ‘)’，也就是字符串形如 ".......))"‘‘.......))" ，我们可以推出：
如果 $s[$i - $dp[$i - 1] - 1] = ‘(’ ，那么

	$dp[$i]=$dp[$i-1]+$dp[$i-$dp[$i-1]-2]+2

也就是我们只需要判断这两种情况，1是'()'结尾，2是'))'结尾，也就对应两个公式

1: $dp[$i]= $dp[$i-2]+2
2: $dp[$i]=$dp[$i-1]+$dp[$i-$dp[$i-1]-2]+2

结合代码画图分析：
代码PHP：
class Solution {

    /**
     * @param String $s
     * @return Integer
     */
    function longestValidParentheses($s) {
        $dp = [];
        $len = strlen($s);
        $max = 0;
        
        for($i=1;$i<$len;$i++){
            if($s[$i] == ')'){
                if($s[$i-1] == '('){
                    $dp[$i] = ($i >= 2 ? $dp[$i-2]:0) + 2;
                }else if($i - $dp[$i-1] > 0 && $s[$i - $dp[$i-1] - 1] == '('){
                    $dp[$i] = $dp[$i-1] + ($i-$dp[$i-1] >= 2?$dp[$i-$dp[$i-1]-2]:0) + 2;
                }
                $max = max($max,$dp[$i]);
            }
        }

        return $max;
    }
}

